-- This is a comment

-- This comments ends after this\n
token





(* This is a comment *)

(* sldkfsd comment multiline \t \n
 (*
*) *)

*)




""

"This is a string"

"This is a valid \
string"

"This is 
invalid""

"Escape sequen\ces \a \b \n trying tab \t \
then \b and then \f"




class
ClAsS
cLaSs

else
eLsE
ElSe

fi
Fi
fI

in
In
iN

inherits
InHeRiTs
iNhErItS

let
LeT
lEt

loop
lOoP
LoOp

pool
PoOl
pOoL

then
ThEn
tHeN

while
WhIlE
wHiLe

case
cAsE
CaSe

of
Of
oF

new
NeW
nEw

isvoid
IsVoId
iSvOiD

not
NoT
nOt

\r
\f
\v
\t

1
1234

true
false

V927Skdls03

s8439VASD38

a <- 3
5 <= 6
=>
@
~
+
-
*
/
=
:
<
,
.
;
{
}
(
)

True
False









(*****************************************************

 *

 *                 Unit Test section

 * Here we exercise the lexer on basic units in Cool manual

 *

*****************************************************)

--check comments



(* *)

(* start 

end  *)

(* make 

        new *)

(***************888*)

(*

*)

(**)

(**)(**)

(***)	

(*((**))*)	

(*(* *)



(*(**)*)

(*()*)

*)(*

*)

--check string



"      X   "

" ok "

" this should also be \

  ok"

"\" ok\""

""

"if\nelse"

"if\\nelse"

"if\\\nelse"

"\c"

"\f"

"\\\ "

"\\\""

" \"\

 end"

"\""

"\t"

"\\t"

"\"\"\""

"\\\\"

"\\n\\\\"

"\\"

"\\\

  \\"

"\\ \

  \\ \""

"/"

"if meet null?"

"\e\s\c\a\p\e ?"



--level checking

(* (*(*(**)*)*) *)

(*  

(* (*(**)*)*) *)

-- a valid comment

-- (* valid --

--  valid *)

--- another valid comment

(**)

 



--check keywords

true tRue trUe tRUe truE tRuE trUE tRUE 

false fAlse faLse fALse falSe fAlSe faLSe fALSe falsE fAlsE faLsE fALsE falSE fAlSE faLSE fALSE 

class Class cLass CLass clAss ClAss cLAss CLAss claSs ClaSs cLaSs CLaSs clASs ClASs cLASs CLASs clasS ClasS cLasS CLasS clAsS ClAsS cLAsS CLAsS claSS ClaSS cLaSS CLaSS clASS ClASS cLASS CLASS 

else Else eLse ELse elSe ElSe eLSe ELSe elsE ElsE eLsE ELsE elSE ElSE eLSE ELSE 

fi Fi fI FI 

if If IF IF iF

in iN IN IN In

inherits Inherits iNherits InhErits INherits inHerits InHerits iNHerits Inherts INHerits inhErits InhErits iNhErits INhErits inHErits InHErits iNHErits INHErits inheRits InheRits iNheRits INheRits inHeRits InHeRits INHETTS iNHeRits INHeRits inhERits InhERits iNhERits INhERits inHERits InHERitsInHERitS INHERits INHERits inherItsiNHeriTs INHeriTs inhEriTs InhEriTs INHERIS iNhEriTs INhEriTs inHEriTs InHEriTs iNHEriTs INHEriTs inheRiTs InheRiTs iNheRiTs INheRiTs inHeRiTs InHeRiTs  INHerITS inhErITS InhErITS iNhErITS INhErITS inHErITS InHErITS iNHErITS INHErITS  

isvoid Isvoid iSvoid ISvoid isVoid IsVoid iSVoid ISVoid isvOid IsvOid iSvOid ISvOid isVO IsVoiD iSVoiD ISVoiD isvOiD IsvOiD iSvOiD ISvOiD isVOiD IsVOiD iSVOiD ISVOiD isvoID IsvoID iSvoID ISvoID isVoID IsVoID iSVoID ISVoID isvOID IsvOID iSvOID ISvOID isVOID IsVOID iSVOID ISVOID 

let Let lEt LEt leT LeT lET LET 

loop Loop lOop LOop loOp  LOOp looP LooP lOoP loOP LoOP lOOP LOOP 

pool Pool pOol  pooL PooL pOoL POoL poOL PoOL pOOL POOL 

then Then tHen THen thEn ThEn tHEn THEn theN TheN tHeN THeN thEN ThEN tHEN THEN 

while While wHile WHile whIle WhIle wHIle WHIle whiLe WhiLe wHiLe WHiLe  WhIlE wHIlE WHIlE whiLE WhiLE wHiLE WHiLE whILE WhILE wHILE WHILE 

case Case cAse CAse CASe casE CasE cAsE CAsE caSE CaSE cASE CASE 

esac Esac eSac ESac esAc EsAc eSAc  ESaC esAC EsAC eSAC ESAC 

new New nEw NEw neW NeW nEW NEW 

of Of oF OF 

not Not nOt NOt noT NoT nOT NOT 



-- check Identifiers 

Identifiers             identifiers

I_dentifier_0123_abcd   i_dentifier_0123_abcd

If12then                if12then  else56

pool28loop              class89object

self                    SELF

Self                    sElf

SELF_TYPE               self_type

SelF_type               SElf_Type



--check Integer 

0 1 1234567890 ~1234567890 123-321

000123

2147483647

4294923295

4294923296

3.1415926

47475035091853759387593

111111111111111111111111111111111111111111111

010101010101010101010101010101010101010101010101010

11111111111111111111111111111111111111111111111111111111111111111110

00000000000000000000000000000000000000000000000000000000000000000009

900000000000000000000000000000000000000000000000000000000000000000000

9999999999999999999999999999999999999999999999999999999999999999999999

10000000000000000000000000000000000000000000000000000000000000000000000



--check Operators 

{ + - * / ~ < <= = <- ; } ' "  : ] | &





(*****************************************************

 *

 *                 Integral Test section

 * Here we test the lexer on a full-fleged Cool source code

 *

 *****************************************************)



(* models one-dimensional cellular automaton on a circle of finite radius

   arrays are faked as Strings,

   X's respresent live cells, dots represent dead cells,

   no error checking is done *)

class CellularAutomaton inherits IO {

    population_map : String;

   

    init(map : String) : SELF_TYPE {

        {

            population_map <- map;

            self;

        }

    };

   

    print() : SELF_TYPE {

        {

            out_string(population_map.concat("\n"));

            self;

        }

    };

   

    num_cells() : Int {

        population_map.length()

    };

   

    cell(position : Int) : String {

        population_map.substr(position, 1)

    };

   

    cell_left_neighbor(position : Int) : String {

        if position = 0 then

            cell(num_cells() - 1)

        else

            cell(position - 1)

        fi

    };

   

    cell_right_neighbor(position : Int) : String {

        if position = num_cells() - 1 then

            cell(0)

        else

            cell(position + 1)

        fi

    };

   

    (* a cell will live if exactly 1 of itself and it's immediate

       neighbors are alive *)

    cell_at_next_evolution(position : Int) : String {

        if (if cell(position) = "X" then 1 else 0 fi

            + if cell_left_neighbor(position) = "X" then 1 else 0 fi

            + if cell_right_neighbor(position) = "X" then 1 else 0 fi

            = 1)

        then

            "X"

        else

            '.'

        fi

    };

   

    evolve() : SELF_TYPE {

        (let position : Int in

        (let num : Int <- num_cells[] in

        (let temp : String in

            {

                while position < num loop

                    {

                        temp <- temp.concat(cell_at_next_evolution(position));

                        position <- position + 1;

                    }

                pool;

                population_map <- temp;

                self;

            }

        ) ) )

    };

};



class Main {

    cells : CellularAutomaton;

   

    main() : SELF_TYPE {

        {

            cells <- (new CellularAutomaton).init("         X         ");

            cells.print();

            (let countdown : Int <- 20 in

                while countdown > 0 loop

                    {

                        cells.evolve();

                        cells.print();

                        countdown <- countdown - 1;

                    }

                pool

            );

            self;

        }

    };

};





(*****************************************************

 *

 *                   Corner cases

 *

 *****************************************************)



"hello\

-- world"



"valid line\

invalid line

valid line\

invalid line

"



(* combination " abc \""*)

" combination (**) "

"\\\"

"invalid \\\"

"

invalid 

"



"\

\

\

\

"

"contains null  "

" recovered "

 

"recovered after a null in source code"

"recovered after an EOF"

"null at 1023"

"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901 34567890123456789012345678901234567890123456789012345678901234567890123456789"

"null at 1024"



"null at 1025"



"null at 1026"





"1024 escaped char"





"1025 escaped char"





then

th en



"\f\b\n\t\a\b\c\d\e\f\n\b\a"



"still work 1?"

(***)

"still work 2?"

(* **)

"still work 3?"

(*) **)

"still work 4?"

(** *)

"still work 5?"

(* (

*)

"still work 6?"

(*((**)*)*)

"still work 7?"



(*  bad*) *)





"recovered after the too-long string"



(* one comment end with EOF